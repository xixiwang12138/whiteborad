package test

import (
	"encoding/base64"
	"fmt"
	"testing"
)

func base64Decode(src []byte) ([]byte, error) {
	return base64.StdEncoding.DecodeString(string(src))
}

func TestBase64(t *testing.T) {
	s := ""
	decode, err := base64Decode([]byte(s))
	data, err := base64Decode([]byte(decode))
	if err != nil {
		return
	}
	fmt.Println(string(data))
}
